% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/qb_db_set_query.R
\name{qb_db_set_query}
\alias{qb_db_set_query}
\title{Set (i.e., insert or update) one or several database entries in one table.}
\usage{
qb_db_set_query(
  conn,
  dat_table,
  table_name = NA_character_,
  db_name = "gbadata",
  return_nn_cols = TRUE,
  return_ids_only = FALSE,
  return_orig_cols = FALSE,
  bulk_insert = FALSE
)
}
\arguments{
\item{conn}{A RMariaDB-connection object (based on the DBI-package) to the
database where the GBA data is stored.}

\item{dat_table}{A \code{data.frame} or \code{tibble} with the data to be
inserted into or updated in the database. It must contain the variable which
is the primary key of the corresponding table in the database. For entries of
this primary key which are \code{NA}, it is assumed that the data in question
is not yet in the database and an \code{INSERT} is applied, if an entry is
an integer value, it is assumed that the data is already in the database and
an \code{UPDATE} is applied.}

\item{table_name}{A single string value with the name of the corresonding table
in the database. Defaults to \code{NA_character_} and therefore, it must be
provided.}

\item{db_name}{The name of the database as a single string value. This is used
to confirm that one is connected to the desired database.}

\item{return_nn_cols}{A single boolean value which indicates if any variable that
is not allowed to be \code{NULL} in the database (e.g., any foreign key) that
might be present in the database but not in the provided \code{dat_table}
object should be returned, too. For example, this means that any foreign key
present in the database but not in the \code{dat_table} object is likely not
set in the database, it will be initialized as the value \code{0} (i.e.,
the number "zero"). Any column that is defined as to be of type "character"
will be initialized as an empty string (i.e., ""). Defaults to \code{TRUE}.}

\item{return_ids_only}{A single boolean value which specifies if the complete
\code{dat_table} object should be returned (in case of an \code{INSERT} with
the new primary key values inserted for the original \code{NA_integer} values),
or if only the column with the primary key should be returned as a \code{tibble},
and, if \code{return_foreign_keys} is also set to \code{TRUE}, the foreign
keys that might be present in the specified table. Defaults to \code{FALSE}.}

\item{return_orig_cols}{A single boolean value which indicates if columns that
were not present in the database but in the \code{dat_table} provided as input
should be also returned as-is, i.e., unchanged. Defaults to \code{FALSE}.}

\item{bulk_insert}{A single boolean value indicating if this function should
    just delete all existing records matching the provided foreign keys,
    re-insert the data into the database and should not attempt to search for any
    existing entry for each provided entry in \code{dat_table}. This option is
    only applicable if all primary key values of the provided \code{dat_table}
    object (the primary key name is fetched from the database) are missing /
    unknown (i.e., \code{NA_integer_}). If any value for the primary key is
    given (i.e., not \code{NA_integer_}), this option is silently switched to
    \code{FALSE} to ensure that an update of existing records is possible!

    If \code{bulk_insert} is set to \code{TRUE} (and all primary key values in
    the \code{dat_table} are missing), this function only checks if there are
    any foreign keys in the specified \code{table_name} that are not present
    in the provided \code{dat_table}. If not, all existing entries in the database
    belonging to the provided foreign keys are deleted and all entries from the
    \code{dat_table} are (re-) inserted into the database. This also means, that
    the values of the primary key for the given \code{dat_table} object are \emph{not}
    filled but returned as \code{NA_integer_} values because one cannot assure
    that the correct values for this variable are returned. It also means that
    there were any previous primary key values in the database regarding the
    present entries, they changed due to this "delete and insert again"-
    operation.

    \strong{Do not use this option when dealing with tables that have child tables
    themself!}

    If there are any foreign keys not present in the \code{dat_table}, option
    \code{bulk_insert} is silently switched to \code{FALSE} again.

    This option should only be used in tables that are not linked to another
    child table to avoid using incorrect foreign key values. But its use should
    give a significant speedup in comparison to a 1-by-1 insert, because it disables
    the check for existing records. Defaults to {FALSE}.}
}
\value{
A \code{tibble}, either the original or an updated version of the provided
    \code{dat_table} object, or a \code{tibble} with one column which is the primary
    key of the corresponding table in the database (and additionally, a number
    of columns representing the possible foreign keys).
}
\description{
Set (i.e., insert or update) one or several database entries in one table.
}
\examples{

\dontrun{
Hospital <- tibble("idHospital" = NA_integer,
                   "xmlFileName" = "260100023-01-2019",
                   "description" = "Diakonissenkrankenhaus Flensburg",
                   "alias" = NA_character,
                   "ikNumber" = "260100023",
                   "locationNumber" = "99",
                   "academicTeachingHospital" = 1L,
                   "psychiatricHospital" = 1L,
                   "urlHospital" = "http://www.diako.de",
                   "urlAdditionalInformation" =
                     "https://www.diako-krankenhaus.de/ueber-uns/qualitaet/"
                   "HospitalDataYear_idHospitalDataYear" = 5L)

con <- dbConnect(RMariaDB::MariaDB(),
                 host     = "localhost",
                 port     = 3306,
                 username = keyring::key_list("mysql-localhost")[1,2],
                 password = keyring::key_get("mysql-localhost", "dataadmin"),
                 dbname   = "gbadata")

Hospital_updated <- qb_db_set_query(con,
                                    Hospital,
                                    table_name = "hospital")

}

}
